/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Error;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AuthorizationApi {
  String basePath = "http://tr02.switchapi.com/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Generate Access Token
  * For generating Access Token, you need API Key and API Secret parameters that are provided from the developer portal. At the request, API Key that will be sent by using header is generated as portal API Key and Signature parameter is generated as md5(APISecret + ExpireTimestamp) format. At Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information. 
   * @param aPIKey Your Switch API Key.
   * @param signature Signature parameter is generated as md5(APISecret + ExpireTimestamp) format.
   * @param expire Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information.
   * @return String
  */
  public String tokenGet (String aPIKey, String signature, Long expire) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling tokenGet",
        new ApiException(400, "Missing the required parameter 'aPIKey' when calling tokenGet"));
    }
    // verify the required parameter 'signature' is set
    if (signature == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'signature' when calling tokenGet",
        new ApiException(400, "Missing the required parameter 'signature' when calling tokenGet"));
    }
    // verify the required parameter 'expire' is set
    if (expire == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'expire' when calling tokenGet",
        new ApiException(400, "Missing the required parameter 'expire' when calling tokenGet"));
    }

    // create path and map variables
    String path = "/Token".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("Signature", ApiInvoker.parameterToString(signature));
    headerParams.put("Expire", ApiInvoker.parameterToString(expire));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Generate Access Token
   * For generating Access Token, you need API Key and API Secret parameters that are provided from the developer portal. At the request, API Key that will be sent by using header is generated as portal API Key and Signature parameter is generated as md5(APISecret + ExpireTimestamp) format. At Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information. 
   * @param aPIKey Your Switch API Key.   * @param signature Signature parameter is generated as md5(APISecret + ExpireTimestamp) format.   * @param expire Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information.
  */
  public void tokenGet (String aPIKey, String signature, Long expire, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling tokenGet",
         new ApiException(400, "Missing the required parameter 'aPIKey' when calling tokenGet"));
    }
    
    // verify the required parameter 'signature' is set
    if (signature == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'signature' when calling tokenGet",
         new ApiException(400, "Missing the required parameter 'signature' when calling tokenGet"));
    }
    
    // verify the required parameter 'expire' is set
    if (expire == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'expire' when calling tokenGet",
         new ApiException(400, "Missing the required parameter 'expire' when calling tokenGet"));
    }
    

    // create path and map variables
    String path = "/Token".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("Signature", ApiInvoker.parameterToString(signature));
    headerParams.put("Expire", ApiInvoker.parameterToString(expire));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
