/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.AddResponse;
import io.swagger.client.model.Body;
import io.swagger.client.model.Error;
import io.swagger.client.model.SetResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DBOperationsApi {
  String basePath = "http://tr02.switchapi.com/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add is used for adding a data object to the list created at Switch DB.
  * You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
   * @param aPIKey Your Switch API Key.
   * @param accessToken Your Access Token.
   * @param list Your data list name.
   * @param body Your new value JSON.
   * @return AddResponse
  */
  public AddResponse addPost (String aPIKey, String accessToken, String list, String body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling addPost",
        new ApiException(400, "Missing the required parameter 'aPIKey' when calling addPost"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling addPost",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling addPost"));
    }
    // verify the required parameter 'list' is set
    if (list == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'list' when calling addPost",
        new ApiException(400, "Missing the required parameter 'list' when calling addPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling addPost",
        new ApiException(400, "Missing the required parameter 'body' when calling addPost"));
    }

    // create path and map variables
    String path = "/Add".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("AccessToken", ApiInvoker.parameterToString(accessToken));
    headerParams.put("List", ApiInvoker.parameterToString(list));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AddResponse) ApiInvoker.deserialize(localVarResponse, "", AddResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Add is used for adding a data object to the list created at Switch DB.
   * You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
   * @param aPIKey Your Switch API Key.   * @param accessToken Your Access Token.   * @param list Your data list name.   * @param body Your new value JSON.
  */
  public void addPost (String aPIKey, String accessToken, String list, String body, final Response.Listener<AddResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling addPost",
         new ApiException(400, "Missing the required parameter 'aPIKey' when calling addPost"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling addPost",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling addPost"));
    }
    
    // verify the required parameter 'list' is set
    if (list == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'list' when calling addPost",
         new ApiException(400, "Missing the required parameter 'list' when calling addPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling addPost",
         new ApiException(400, "Missing the required parameter 'body' when calling addPost"));
    }
    

    // create path and map variables
    String path = "/Add".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("AccessToken", ApiInvoker.parameterToString(accessToken));
    headerParams.put("List", ApiInvoker.parameterToString(list));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AddResponse) ApiInvoker.deserialize(localVarResponse,  "", AddResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * It&#39;s used for listing a data added before.
  * List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
   * @param aPIKey Your Switch API Key.
   * @param accessToken Your Access Token.
   * @param list Your data list name.
   * @param body Your Switch DB Query.
   * @return void
  */
  public void listPost (String aPIKey, String accessToken, String list, Body body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling listPost",
        new ApiException(400, "Missing the required parameter 'aPIKey' when calling listPost"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling listPost",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling listPost"));
    }
    // verify the required parameter 'list' is set
    if (list == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'list' when calling listPost",
        new ApiException(400, "Missing the required parameter 'list' when calling listPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling listPost",
        new ApiException(400, "Missing the required parameter 'body' when calling listPost"));
    }

    // create path and map variables
    String path = "/List".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("AccessToken", ApiInvoker.parameterToString(accessToken));
    headerParams.put("List", ApiInvoker.parameterToString(list));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * It&#39;s used for listing a data added before.
   * List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
   * @param aPIKey Your Switch API Key.   * @param accessToken Your Access Token.   * @param list Your data list name.   * @param body Your Switch DB Query.
  */
  public void listPost (String aPIKey, String accessToken, String list, Body body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling listPost",
         new ApiException(400, "Missing the required parameter 'aPIKey' when calling listPost"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling listPost",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling listPost"));
    }
    
    // verify the required parameter 'list' is set
    if (list == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'list' when calling listPost",
         new ApiException(400, "Missing the required parameter 'list' when calling listPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling listPost",
         new ApiException(400, "Missing the required parameter 'body' when calling listPost"));
    }
    

    // create path and map variables
    String path = "/List".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("AccessToken", ApiInvoker.parameterToString(accessToken));
    headerParams.put("List", ApiInvoker.parameterToString(list));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * It&#39;s used for deleting a data added before at Switch DB.
  * List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
   * @param aPIKey Your Switch API Key.
   * @param accessToken Your Access Token.
   * @param list Your data list name.
   * @param listItemId Your list item id.
   * @return SetResponse
  */
  public SetResponse setDelete (String aPIKey, String accessToken, String list, String listItemId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling setDelete",
        new ApiException(400, "Missing the required parameter 'aPIKey' when calling setDelete"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling setDelete",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling setDelete"));
    }
    // verify the required parameter 'list' is set
    if (list == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'list' when calling setDelete",
        new ApiException(400, "Missing the required parameter 'list' when calling setDelete"));
    }
    // verify the required parameter 'listItemId' is set
    if (listItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'listItemId' when calling setDelete",
        new ApiException(400, "Missing the required parameter 'listItemId' when calling setDelete"));
    }

    // create path and map variables
    String path = "/Set".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("AccessToken", ApiInvoker.parameterToString(accessToken));
    headerParams.put("List", ApiInvoker.parameterToString(list));
    headerParams.put("ListItemId", ApiInvoker.parameterToString(listItemId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SetResponse) ApiInvoker.deserialize(localVarResponse, "", SetResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * It&#39;s used for deleting a data added before at Switch DB.
   * List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
   * @param aPIKey Your Switch API Key.   * @param accessToken Your Access Token.   * @param list Your data list name.   * @param listItemId Your list item id.
  */
  public void setDelete (String aPIKey, String accessToken, String list, String listItemId, final Response.Listener<SetResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling setDelete",
         new ApiException(400, "Missing the required parameter 'aPIKey' when calling setDelete"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling setDelete",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling setDelete"));
    }
    
    // verify the required parameter 'list' is set
    if (list == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'list' when calling setDelete",
         new ApiException(400, "Missing the required parameter 'list' when calling setDelete"));
    }
    
    // verify the required parameter 'listItemId' is set
    if (listItemId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'listItemId' when calling setDelete",
         new ApiException(400, "Missing the required parameter 'listItemId' when calling setDelete"));
    }
    

    // create path and map variables
    String path = "/Set".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("AccessToken", ApiInvoker.parameterToString(accessToken));
    headerParams.put("List", ApiInvoker.parameterToString(list));
    headerParams.put("ListItemId", ApiInvoker.parameterToString(listItemId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SetResponse) ApiInvoker.deserialize(localVarResponse,  "", SetResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * It&#39;s used for updating a data object that is already added to Switch DB.
  * In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
   * @param aPIKey Your Switch API Key.
   * @param accessToken Your Access Token.
   * @param list Your data list name.
   * @param listItemId Your list item id.
   * @param body Your new value JSON.
   * @return SetResponse
  */
  public SetResponse setPost (String aPIKey, String accessToken, String list, String listItemId, String body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling setPost",
        new ApiException(400, "Missing the required parameter 'aPIKey' when calling setPost"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling setPost",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling setPost"));
    }
    // verify the required parameter 'list' is set
    if (list == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'list' when calling setPost",
        new ApiException(400, "Missing the required parameter 'list' when calling setPost"));
    }
    // verify the required parameter 'listItemId' is set
    if (listItemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'listItemId' when calling setPost",
        new ApiException(400, "Missing the required parameter 'listItemId' when calling setPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling setPost",
        new ApiException(400, "Missing the required parameter 'body' when calling setPost"));
    }

    // create path and map variables
    String path = "/Set".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("AccessToken", ApiInvoker.parameterToString(accessToken));
    headerParams.put("List", ApiInvoker.parameterToString(list));
    headerParams.put("ListItemId", ApiInvoker.parameterToString(listItemId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SetResponse) ApiInvoker.deserialize(localVarResponse, "", SetResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * It&#39;s used for updating a data object that is already added to Switch DB.
   * In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
   * @param aPIKey Your Switch API Key.   * @param accessToken Your Access Token.   * @param list Your data list name.   * @param listItemId Your list item id.   * @param body Your new value JSON.
  */
  public void setPost (String aPIKey, String accessToken, String list, String listItemId, String body, final Response.Listener<SetResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'aPIKey' is set
    if (aPIKey == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'aPIKey' when calling setPost",
         new ApiException(400, "Missing the required parameter 'aPIKey' when calling setPost"));
    }
    
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling setPost",
         new ApiException(400, "Missing the required parameter 'accessToken' when calling setPost"));
    }
    
    // verify the required parameter 'list' is set
    if (list == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'list' when calling setPost",
         new ApiException(400, "Missing the required parameter 'list' when calling setPost"));
    }
    
    // verify the required parameter 'listItemId' is set
    if (listItemId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'listItemId' when calling setPost",
         new ApiException(400, "Missing the required parameter 'listItemId' when calling setPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling setPost",
         new ApiException(400, "Missing the required parameter 'body' when calling setPost"));
    }
    

    // create path and map variables
    String path = "/Set".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("APIKey", ApiInvoker.parameterToString(aPIKey));
    headerParams.put("AccessToken", ApiInvoker.parameterToString(accessToken));
    headerParams.put("List", ApiInvoker.parameterToString(list));
    headerParams.put("ListItemId", ApiInvoker.parameterToString(listItemId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SetResponse) ApiInvoker.deserialize(localVarResponse,  "", SetResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
