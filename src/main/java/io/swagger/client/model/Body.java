/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.ListOrder;
import io.swagger.client.model.WhereItem;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Body {
  
  @SerializedName("list")
  private String list = null;
  @SerializedName("count")
  private Integer count = null;
  @SerializedName("page")
  private Integer page = null;
  @SerializedName("whereType")
  private String whereType = null;
  @SerializedName("where")
  private List<WhereItem> where = null;
  @SerializedName("order")
  private ListOrder order = null;

  /**
   * List name.
   **/
  @ApiModelProperty(value = "List name.")
  public String getList() {
    return list;
  }
  public void setList(String list) {
    this.list = list;
  }

  /**
   * Item count.
   **/
  @ApiModelProperty(value = "Item count.")
  public Integer getCount() {
    return count;
  }
  public void setCount(Integer count) {
    this.count = count;
  }

  /**
   * Page number.
   **/
  @ApiModelProperty(value = "Page number.")
  public Integer getPage() {
    return page;
  }
  public void setPage(Integer page) {
    this.page = page;
  }

  /**
   * Optional enumerator. You can assign the mode of implementation of where criterions by using AND and OR types under whereType parameter.
   **/
  @ApiModelProperty(value = "Optional enumerator. You can assign the mode of implementation of where criterions by using AND and OR types under whereType parameter.")
  public String getWhereType() {
    return whereType;
  }
  public void setWhereType(String whereType) {
    this.whereType = whereType;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<WhereItem> getWhere() {
    return where;
  }
  public void setWhere(List<WhereItem> where) {
    this.where = where;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ListOrder getOrder() {
    return order;
  }
  public void setOrder(ListOrder order) {
    this.order = order;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body body = (Body) o;
    return (this.list == null ? body.list == null : this.list.equals(body.list)) &&
        (this.count == null ? body.count == null : this.count.equals(body.count)) &&
        (this.page == null ? body.page == null : this.page.equals(body.page)) &&
        (this.whereType == null ? body.whereType == null : this.whereType.equals(body.whereType)) &&
        (this.where == null ? body.where == null : this.where.equals(body.where)) &&
        (this.order == null ? body.order == null : this.order.equals(body.order));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.list == null ? 0: this.list.hashCode());
    result = 31 * result + (this.count == null ? 0: this.count.hashCode());
    result = 31 * result + (this.page == null ? 0: this.page.hashCode());
    result = 31 * result + (this.whereType == null ? 0: this.whereType.hashCode());
    result = 31 * result + (this.where == null ? 0: this.where.hashCode());
    result = 31 * result + (this.order == null ? 0: this.order.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body {\n");
    
    sb.append("  list: ").append(list).append("\n");
    sb.append("  count: ").append(count).append("\n");
    sb.append("  page: ").append(page).append("\n");
    sb.append("  whereType: ").append(whereType).append("\n");
    sb.append("  where: ").append(where).append("\n");
    sb.append("  order: ").append(order).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
